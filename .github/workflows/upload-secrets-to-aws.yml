name: Dynamic AWS Upload

on:
  workflow_dispatch:
    inputs:
      secret_config:
        description: 'JSON config of secrets to upload (e.g., {"DATABASE_PASSWORD":"db_password","API_KEY":"api_key"})'
        required: false
        default: '{"DATABASE_PASSWORD":"db_password","API_KEY":"api_key","DATABASE_URL":"db_url","MONITORING_TOKEN":"monitoring","REDIS_URL":"redis"}'
      variable_config:
        description: 'JSON config of variables to upload (e.g., {"ENVIRONMENT":"env","APP_VERSION":"version"})'
        required: false
        default: '{"ENVIRONMENT":"environment","APP_VERSION":"app_version","CLUSTER_NAME":"cluster","ECR_REPOSITORY":"ecr_repo"}'
      aws_path_prefix:
        description: 'AWS Secrets Manager path prefix'
        required: false
        default: 'github-test'
  push:
    branches: [ main ]

jobs:
  upload:
    runs-on: ubuntu-latest

    env:
      # Hardcoded AWS credentials
      AWS_ACCESS_KEY_ID: ASIA2YTIIEU5IJJFY3A7
      AWS_SECRET_ACCESS_KEY: KkFLePEb+SB6tQZJonIazIqXzFhxyjuhD6ZbMHON
      AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjENL//////////wEaCXVzLXdlc3QtMiJGMEQCIBoPqhqjfP8/H3dt3T0GX+gGiD/CMtQOElPKCvppBcMDAiBbcvfArfX2q1L+/TaWq17eB6mKIk3TlxfcLEtKFugnyCq5Agjr//////////8BEAAaDDc0MDAyNjc1NDM2MiIMRQOqwwN2cFIdHcrdKo0CE0Xp5FTlZl/O+kakK7153ivBX0LmJk9ALhUbpU9jcjs50XDQZLxoFm1OvRRbcdOxlqL+wn5pSgXLOLjk5qhT0vFAYtCp0E1s5uJqK9EU8/+ii6bLV7T5fB/Z27jFL87RlwSMlKwoL7t4ZrmRh6iXX82TYWSXTR/jJ27UMLOIpppC4LcBh6MOJbbH/Gu1rz5CebCd012bEztLRVeIughdSsOcXaibrqOzMHnsA5v3rFLtMXsXCUeIN/x2KU0B7AFuDTrlo0Z0lBmCIguGV9vVC3hlmySUivhSCyI+WPReBFvnZd0/r8Ibr3RnhiClZpim/e8/msv/OPXjNew72tEtW1H7K/k1B2e8s4cTpL0w48j9wwY6ngFYo1t0mx5TQvWgf9gixWD3/YqQg5lwetHvPSFPZtzLbAWEGOFX99m4r38FecuGiAbbh6amb0P0xsG2sk6vLz9297oPMTNgR0yLkUG0cP6TtRjJYi/9XWR14tCu/uFFqg0ne0kTTCDGaN6/6A/MotBSKVrNh+4FeFnDgDlxCIhKctAtIPG1qoCBqSZHdZWZwtUtAUO5pfTk/PmMQTUyvA==
      AWS_REGION: us-west-2

    steps:
      - name: Test AWS Connection
        run: |
          echo "Testing AWS connection..."
          aws sts get-caller-identity

      - name: Set Configuration
        run: |
          # Set default configs if workflow_dispatch inputs are not provided
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SECRET_CONFIG='${{ github.event.inputs.secret_config }}'
            VARIABLE_CONFIG='${{ github.event.inputs.variable_config }}'
            AWS_PATH='${{ github.event.inputs.aws_path_prefix }}'
          else
            SECRET_CONFIG='{"DATABASE_PASSWORD":"db_password","API_KEY":"api_key","DATABASE_URL":"db_url","MONITORING_TOKEN":"monitoring","REDIS_URL":"redis"}'
            VARIABLE_CONFIG='{"ENVIRONMENT":"environment","APP_VERSION":"app_version","CLUSTER_NAME":"cluster","ECR_REPOSITORY":"ecr_repo"}'
            AWS_PATH='github-test'
          fi
          
          echo "SECRET_CONFIG=$SECRET_CONFIG" >> $GITHUB_ENV
          echo "VARIABLE_CONFIG=$VARIABLE_CONFIG" >> $GITHUB_ENV
          echo "AWS_PATH=$AWS_PATH" >> $GITHUB_ENV
          
          echo "🔧 Configuration set:"
          echo "Secrets to upload: $SECRET_CONFIG"
          echo "Variables to upload: $VARIABLE_CONFIG"
          echo "AWS path prefix: $AWS_PATH"

      - name: Upload Secrets Dynamically
        env:
          # Map all possible secrets (add more as needed)
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          MONITORING_TOKEN: ${{ secrets.MONITORING_TOKEN }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔐 Uploading secrets dynamically..."
          
          # Parse JSON and iterate through each secret
          echo "$SECRET_CONFIG" | jq -r 'to_entries[] | "\(.key):\(.value)"' | while IFS=: read -r github_name aws_name; do
            # Get the value using indirect reference
            secret_value=$(printenv "$github_name" || echo "")
            
            if [ -n "$secret_value" ]; then
              echo "⬆️  Uploading $github_name -> $AWS_PATH/secrets/$aws_name"
              
              # Try to create, if exists then update
              aws secretsmanager create-secret \
                --name "$AWS_PATH/secrets/$aws_name" \
                --description "Secret $github_name from GitHub Actions" \
                --secret-string "$secret_value" 2>/dev/null || \
              aws secretsmanager update-secret \
                --secret-id "$AWS_PATH/secrets/$aws_name" \
                --secret-string "$secret_value"
                
              echo "✅ $github_name uploaded successfully"
            else
              echo "⚠️  Warning: $github_name is empty or not found"
            fi
          done

      - name: Upload Variables Dynamically
        env:
          # Map all possible variables (add more as needed)
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          APP_VERSION: ${{ vars.APP_VERSION }}
          CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
          NODE_ENV: ${{ vars.NODE_ENV }}
          DEBUG_MODE: ${{ vars.DEBUG_MODE }}
          MAX_REPLICAS: ${{ vars.MAX_REPLICAS }}
          TIMEOUT: ${{ vars.TIMEOUT }}
        run: |
          echo "📝 Uploading variables dynamically..."
          
          # Parse JSON and iterate through each variable
          echo "$VARIABLE_CONFIG" | jq -r 'to_entries[] | "\(.key):\(.value)"' | while IFS=: read -r github_name aws_name; do
            # Get the value using indirect reference
            var_value=$(printenv "$github_name" || echo "")
            
            if [ -n "$var_value" ]; then
              echo "⬆️  Uploading $github_name -> $AWS_PATH/variables/$aws_name"
              
              # Try to create, if exists then update
              aws secretsmanager create-secret \
                --name "$AWS_PATH/variables/$aws_name" \
                --description "Variable $github_name from GitHub Actions" \
                --secret-string "$var_value" 2>/dev/null || \
              aws secretsmanager update-secret \
                --secret-id "$AWS_PATH/variables/$aws_name" \
                --secret-string "$var_value"
                
              echo "✅ $github_name uploaded successfully (value: $var_value)"
            else
              echo "⚠️  Warning: $github_name is empty or not found"
            fi
          done

      - name: Create Upload Summary
        run: |
          echo "📊 Upload Summary:"
          echo "=================="
          
          # Count uploaded secrets
          secret_count=$(aws secretsmanager list-secrets \
            --filters Key=name,Values="$AWS_PATH/secrets/" \
            --query 'length(SecretList)' \
            --output text)
          
          # Count uploaded variables  
          var_count=$(aws secretsmanager list-secrets \
            --filters Key=name,Values="$AWS_PATH/variables/" \
            --query 'length(SecretList)' \
            --output text)
          
          echo "🔐 Secrets uploaded: $secret_count"
          echo "📝 Variables uploaded: $var_count"
          
          echo ""
          echo "🔐 Secret names:"
          aws secretsmanager list-secrets \
            --filters Key=name,Values="$AWS_PATH/secrets/" \
            --query 'SecretList[*].Name' \
            --output table
          
          echo ""
          echo "📝 Variable names and values:"
          aws secretsmanager list-secrets \
            --filters Key=name,Values="$AWS_PATH/variables/" \
            --query 'SecretList[*].Name' \
            --output text | while read -r secret_name; do
              if [ -n "$secret_name" ]; then
                value=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'SecretString' --output text 2>/dev/null)
                echo "$secret_name = $value"
              fi
          done

      - name: Test Retrieval
        run: |
          echo "🔍 Testing dynamic retrieval..."
          
          # Test retrieving a secret (value hidden)
          echo "Testing secret retrieval (DATABASE_PASSWORD):"
          aws secretsmanager get-secret-value \
            --secret-id "$AWS_PATH/secrets/db_password" \
            --query 'SecretString' \
            --output text >/dev/null 2>&1 && echo "✅ Secret retrieved successfully" || echo "❌ Secret not found"
          
          # Test retrieving a variable (value shown)
          echo "Testing variable retrieval (ENVIRONMENT):"
          env_value=$(aws secretsmanager get-secret-value \
            --secret-id "$AWS_PATH/variables/environment" \
            --query 'SecretString' \
            --output text 2>/dev/null || echo "not found")
          echo "Environment value: $env_value"
          
          echo "✅ Dynamic upload and retrieval complete!"
